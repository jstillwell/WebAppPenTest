using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WebAppPenTest.Proxy
{
    public class Packet
    {
        public string Verb { get; set; }
        public Protocol Protocol { get; set; }
        public string Host { get; set; }
        //public int HostPort { get; set; }
        // string DestinationAddress { get; set; }
        //public int DestinationPort { get; set; }
        public string Body { get; set; }
        public List<KeyValuePair<string, string>> Headers = new List<KeyValuePair<string, string>>();
        public Dictionary<int, int> Delimiters { get; set; }

        public static Packet StringToPacket(string rawData)
        {
            var packet = new Packet();

            //read string to parse packet into object
            rawData = rawData.Replace(": ", ":");
            char[] delims = { ' ', '\r', '\n' };
            var initialSplit = rawData.Split(delims);
            foreach (var item in initialSplit)
            {

            }

            //GET 
            //http://hackaday.com/ 
            //HTTP/1.1
            //Host: hackaday.com
            //Proxy-Connection: keep-alive
            //Cache-Control: max-age=0
            //Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
            //User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36
            //Accept-Encoding: gzip, deflate, sdch
            //Accept-Language: en-US,en;q=0.8
            //Cookie: __qca=P0-590991564-1402240994104; _chartbeat_uuniq=3; _chartbeat2=BVlcGeDfe3TxxuzUe.1402240994901.1415649146062.0000000011000001; wordpress_test_cookie=WP+Cookie+check; _ga=GA1.2.960852950.1402240994; __utma=249841311.960852950.1402240994.1433370188.1433463646.51; __utmc=249841311; __utmz=249841311.1402240994.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)

            return packet;
        }
        public static async Task<Packet> StringToPacketAsync(string rawData)
        {
            var packet = new Packet();

            //read string to parse packet into object
            rawData = rawData.Replace(": ", ":");
            char[] delims = { ' ', '\r', '\n' };
            var initialSplit = rawData.Split(delims);

            packet.Verb = initialSplit[0];
            packet.Host = initialSplit[1];
            packet.Protocol = Protocol.http;    //[2]
            for (int i = 3; i < initialSplit.Length-1; i++)
            {
                if (!string.IsNullOrEmpty(initialSplit[i]))
                {
                    var headerPair = initialSplit[i].Split(':');

                    if (headerPair[0] == "User-Agent:")
                    {
                        StringBuilder sb = new StringBuilder();
                        for (int j = i; j < headerPair.Length-1; j++)
                        {
                            //TODO: get the rest of the fields and add them up to complete the user agent.

                        }
                    }

                    packet.Headers.Add(new KeyValuePair<string, string>(headerPair[0], headerPair[1])); 
                }
            }
            

            return packet;
        }
    }

    public enum Protocol
    {
        http,
        https
    }
}
