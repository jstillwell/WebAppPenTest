using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using WebAppPenTest.Proxy;

namespace WebAppPenTest {
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window {
        private Listener Listener = new Listener();
        Domain.Packet domPacket = new Domain.Packet();
        Domain.Header domHeader = new Domain.Header();
        List<Common.Models.Packet> Packets;
        List<Common.Models.Header> Headers;
        Uri Uri;

        public MainWindow() {
            InitializeComponent();
            Packets = domPacket.GetList(DateTime.Parse("2016-01-01"), DateTime.Now);
            Headers = new List<Common.Models.Header>();
            Packets.Reverse();
            dgTraffic.ItemsSource = Packets;

            HideScriptErrors(brwRender, true);
        }
        /// <summary>
        /// Suppresses IE script errors, cause they are annoying.
        /// </summary>
        /// <param name="wb"></param>
        /// <param name="hide"></param>
        public void HideScriptErrors(WebBrowser wb, bool hide) {
            var fiComWebBrowser = typeof(WebBrowser).GetField("_axIWebBrowser2", BindingFlags.Instance | BindingFlags.NonPublic);
            if (fiComWebBrowser == null) return;
            var objComWebBrowser = fiComWebBrowser.GetValue(wb);
            if (objComWebBrowser == null) {
                wb.Loaded += (o, s) => HideScriptErrors(wb, hide); //In case we are to early
                return;
            }
            objComWebBrowser.GetType().InvokeMember("Silent", BindingFlags.SetProperty, null, objComWebBrowser, new object[] { hide });
        }
        /// <summary>
        /// timer for updating the tables from the database.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Timer_Elapsed(object sender, ElapsedEventArgs e) {
            this.Dispatcher.Invoke(() => {
                Packets = domPacket.GetList(DateTime.Parse("2016-01-01"), DateTime.Now);
                Packets.Reverse();

                dgTraffic.ItemsSource = Packets;
            });
        }
        /// <summary>
        /// Click event handler for the stop button.
        /// Turns off the proxy and stops capture of web traffic.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnStop_Click(object sender, RoutedEventArgs e) {
            Listener.StopListener();
        }
        /// <summary>
        /// Start button click event handler.
        /// Starts the proxy to enable capture of web traffic.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnStart_Click(object sender, RoutedEventArgs e) {
            Timer Timer = new Timer(10 * 1000);
            Timer.Enabled = true;

            Timer.Elapsed += Timer_Elapsed;
            Timer.Start();

            Listener.StartListener();
        }
        /// <summary>
        /// Click event handler for options menu item.
        /// Opens the Options window.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MenuItemOptions_Click(object sender, RoutedEventArgs e) {
            var optionsWindow = new WebAppPenTest.modals.Options();
            optionsWindow.Show();
        }
        /// <summary>
        /// Selection event for main table that displays the web traffic.
        /// Triggers a domain request for headers associated with that request/response.
        /// displays the header tab if it is not already visible.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgTraffic_SelectionChanged(object sender, SelectionChangedEventArgs e) {
            var row = ((DataGrid)sender).SelectedItem;
            var packet = row as Common.Models.Packet;

            if (packet != null) {
                Headers = domHeader.GetList(packet.Id);
                dgHeaders.ItemsSource = Headers;

                //show render tab
                dgHeaders.IsEnabled = true;
                var tab = tabRequestChildTabs.Items[1] as TabItem;
                tab.IsSelected = true;
            }
        }
        /// <summary>
        /// window close event. Makes sure the proxy gets turned off when the window closes.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void winMain_Closing(object sender, System.ComponentModel.CancelEventArgs e) {
            Listener.Dispose();
        }
        /// <summary>
        /// Event for handling keypress in the url entry textbox.
        /// Handles the Enter key and shows warning message if the proxy is not running.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void textBox_KeyUp(object sender, KeyEventArgs e) {
            var textBox = sender as TextBox;
            if (e.Key == Key.Enter) {
                if (!Listener.IsProxyOn) {
                    MessageBox.Show("The proxy is not on and therefore no traffic will be captured.");
                }

                if (textBox.Text.StartsWith("http://")) {
                    Uri = new Uri(textBox.Text);
                } else {
                    var url = string.Concat("http://", textBox.Text);
                    Uri = new Uri(url);
                }

                //show render tab
                brwRender.Navigate(Uri);
                dgRender.IsEnabled = true;
                var tab = tabRequestChildTabs.Items[2] as TabItem;
                tab.IsSelected = true;
                brwRender.Focus();
            }
        }
    }
}
