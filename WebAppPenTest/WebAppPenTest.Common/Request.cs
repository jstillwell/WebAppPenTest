using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace WebAppPenTest.Common {
    /// <summary>
    /// Friendly wrappers for web requests.
    /// Async and non.
    /// Added Raw requests for post and get.
    /// </summary>
    public class Request {
        public void HttpGetRaw(string request) {

        }

        public void HttpPostRaw(string request) {

        }

        public string HttpGet(string URI) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            System.Net.WebResponse resp = req.GetResponse();
            System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream());
            return sr.ReadToEnd().Trim();
        }
        public Stream HttpGetStream(string URI) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            System.Net.WebResponse resp = req.GetResponse();
            return resp.GetResponseStream();
        }
        public async Task<WebResponse> HttpGetAsync(string URI) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            return await req.GetResponseAsync();
        }
        public async Task<WebResponse> HttpGetAsync(string URI, NameValueCollection headers) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            req.Headers.Add(headers);
            return await req.GetResponseAsync();
        }
        public async Task<Stream> HttpGetStreamAsync(string URI) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            System.Net.WebResponse resp = await req.GetResponseAsync();
            return resp.GetResponseStream();
        }

        public string HttpPost(string URI, string contentType, string Parameters) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            req.ContentType = contentType;
            req.Method = "POST";
            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(Parameters);
            req.ContentLength = bytes.Length;
            System.IO.Stream os = req.GetRequestStream();
            os.Write(bytes, 0, bytes.Length);
            System.Net.WebResponse resp = req.GetResponse();
            if (resp == null) return null;
            System.IO.StreamReader sr = new System.IO.StreamReader(resp.GetResponseStream());
            return sr.ReadToEnd().Trim();
        }

        public async Task<WebResponse> HttpPostAsync(string URI, string contentType, string Parameters) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            req.ContentType = contentType;
            req.Method = "POST";

            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(Parameters);
            req.ContentLength = bytes.Length;
            System.IO.Stream os = await req.GetRequestStreamAsync();
            os.Write(bytes, 0, bytes.Length);

            return await req.GetResponseAsync();
        }

        public async Task<WebResponse> HttpPostAsync(string URI, NameValueCollection headers, string contentType, string parameters) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            req.ContentType = contentType;
            req.Method = "POST";
            req.Headers.Add(headers);

            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(parameters);
            req.ContentLength = bytes.Length;
            System.IO.Stream os = await req.GetRequestStreamAsync();
            os.Write(bytes, 0, bytes.Length);

            return await req.GetResponseAsync();
        }
        public async Task<Stream> HttpPostStreamAsync(string URI, NameValueCollection headers, string contentType, string parameters) {
            System.Net.WebRequest req = System.Net.WebRequest.Create(URI);
            req.ContentType = contentType;
            req.Method = "POST";
            req.Headers.Add(headers);

            byte[] bytes = System.Text.Encoding.ASCII.GetBytes(parameters);
            req.ContentLength = bytes.Length;
            return await req.GetRequestStreamAsync();
        }
    }
}
