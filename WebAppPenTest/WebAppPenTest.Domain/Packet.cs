using Dapper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WebAppPenTest.Domain {
    public class Packet : DapperWrapper {
        private static readonly string Packet_Get = "SELECT Id, Source, Destination, Url, IsIncoming, [Timestamp] FROM Packets WHERE Id = @Id";
        private static readonly string Packet_GetList = "SELECT Id, Source, Destination, Url, IsIncoming, [Timestamp] FROM Packets";    // WHERE [Timestamp] > @StartDate AND [Timestamp] < @EndDate";
        private static readonly string Packet_Insert = "INSERT INTO Packets(Source, Destination, Url, [Protocol], IsIncoming, [Timestamp]) VALUES (@Source, @Destination, @Url, @Protocol, @IsIncoming, @Timestamp); SELECT last_insert_rowid();";

        public void Insert(Common.Models.Packet packet) {
            var id = base.DbConnection.Query<int>(Packet_Insert,
                new { Source = packet.Source, Destination = packet.Destination, Url = packet.Url, IsIncoming = packet.IsIncoming, Protocol = packet.Protocol, Timestamp = packet.Timestamp},
                commandType: CommandType.Text).SingleOrDefault();
            //use ref type to set id on model so we can use it later
            packet.Id = id;

            var domHeader = new Header();
            domHeader.InsertList(packet.Headers, id); 
        }
        public Common.Models.Packet Get(long id) {
            return base.DbConnection.Query<Common.Models.Packet>(Packet_Get,
                new { Id = id },
                commandType: CommandType.Text).SingleOrDefault();
        }
        public List<Common.Models.Packet> GetList(DateTime startDate, DateTime endDate) {
            return base.DbConnection.Query<Common.Models.Packet>(Packet_GetList,
                commandType: CommandType.Text).ToList();
        }
    }
}
